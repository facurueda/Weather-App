{"version":3,"sources":["components/search/Search.jsx","components/forecastCard/ForecastCard.jsx","components/todayCard/TodayCard.jsx","App.js","index.js"],"names":["Search","onSearch","useState","city","setCity","onSubmit","e","preventDefault","className","type","placeholder","value","onChange","target","ForecastCard","m","d","dayInfo","IMG_DAY","Object","values","day","condition","slice","MIN_TEMP","mintemp_c","MAX_TEMP","maxtemp_c","YEAR_NUMBER","date","MONTH_NUMBER","DAY_NUMBER","THIS_DAY","Date","getDate","src","getDay","TodayCard","actualTemp","actualCity","forecastTemp","DAY","MONTH","getMonth","NUMBER_DAY","YEAR","getFullYear","TEXT_CONDITION","toUpperCase","temp_c","map","console","log","App","setActualTemp","setForecastTemp","setActualCity","axios","method","url","then","response","data","current","forecast","forecastday","catch","error","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bef7a042.chunk.js","sourcesContent":["import React from 'react'\nimport { useState } from 'react'\nimport './Search.css'\n\nconst Search = ({onSearch}) => {\n\n        const [city, setCity] = useState(\"\");\n        return (\n                <form onSubmit={(e) => {\n                        e.preventDefault();\n                        onSearch(city);\n                }}>\n                        <input\n                                className=\"inputSearch\"\n                                type=\"text\"\n                                placeholder=\"Search city...\"\n                                value={city}\n                                onChange={e => setCity(e.target.value)}\n                        />\n                </form>\n        )\n}\n\nexport default Search;","import React from 'react'\nimport './ForecastCard.css'\n\nconst ForecastCard = ({ dayInfo }) => {\n\n        const TEXT_CONDITION = Object.values(dayInfo.day.condition)\n\n        const IMG_DAY = TEXT_CONDITION[1].slice(2)\n\n        const MIN_TEMP = dayInfo.day.mintemp_c;\n\n        const MAX_TEMP = dayInfo.day.maxtemp_c;\n\n        const YEAR_NUMBER = dayInfo.date.slice(0, 4);\n\n        const MONTH_NUMBER = dayInfo.date.slice(5, 7);\n\n        const DAY_NUMBER = dayInfo.date.slice(8, 10);\n\n        const THIS_DAY = new Date().getDate()\n\n        // Function to get day of week\n\n        const getDay = (y, m, d) => {\n                var days = ['Sunday', 'Monday', 'Tuesday',\n                        'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n                var d = new Date(y, --m, d);\n                return d && days[d.getDay()];\n        }\n\n        return (\n                <div className='forestCardContainer'>\n                        <img src={`http://${IMG_DAY}`} />\n                        <div className=\"minMaxTemp\">{MIN_TEMP}°C / {MAX_TEMP}°C</div>\n                        { DAY_NUMBER == THIS_DAY ?\n                                (\n                                        <div className='textDay'>Today</div>\n                                ) : (\n                                        <div className='textDay'>{getDay(YEAR_NUMBER, MONTH_NUMBER, DAY_NUMBER)}</div>\n                                )}\n\n                </div>\n        )\n}\n\nexport default ForecastCard;","import React from 'react'\nimport ForecastCard from '../forecastCard/ForecastCard';\nimport './TodayCard.css'\nimport { Textfit } from 'react-textfit';\n\nconst TodayCard = ({ actualTemp, actualCity, forecastTemp }) => {\n\n        const DAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\n        const MONTHS = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\n        const DAY = DAYS[new Date().getDay()];\n\n        const MONTH = MONTHS[new Date().getMonth()];\n\n        const NUMBER_DAY = new Date().getDate();\n\n        const YEAR = new Date().getFullYear();\n\n        const TEXT_CONDITION = Object.values(actualTemp.condition);\n\n        const MIN_TEMP = forecastTemp[0].day.mintemp_c;\n\n        const MAX_TEMP = forecastTemp[0].day.maxtemp_c;\n\n        return (\n                <div>\n                        <div className='cardDayContainer'>\n                                <div className=\"cityName\">{actualCity.toUpperCase()}</div>\n                                <div className=\"dateContainer\">{DAY}, {MONTH} {NUMBER_DAY}, {YEAR}</div>\n                                <div className=\"temperatura\">{actualTemp.temp_c} °C</div>\n                                <div className=\"condition\">{TEXT_CONDITION[0]}</div>\n                                <div className=\"cardForecastContainer\">\n                                        {forecastTemp.map(dayInfo => {\n                                                console.log('map', dayInfo)\n                                                return (\n                                                        <ForecastCard dayInfo={dayInfo} />\n                                                )\n                                        })}\n                                </div>\n                        </div>\n                </div>\n        )\n}\n\nexport default TodayCard;","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Search from \"./components/search/Search\";\nimport axios from \"axios\";\nimport TodayCard from \"./components/todayCard/TodayCard\";\n\nconst App = () => {\n  const [actualTemp, setActualTemp] = useState([]);\n  const [forecastTemp, setForecastTemp] = useState([]);\n  const [actualCity, setActualCity] = useState(null);\n\n  const onSearch = (city) => {\n    axios({\n      method: \"GET\",\n      url: `https://api.weatherapi.com/v1/forecast.json?key=6bc7f8e29de0427d829180352200710&q=${city}&days=10`,\n    })\n      .then((response) => {\n        setActualTemp(response.data.current);\n        setForecastTemp(response.data.forecast.forecastday);\n        setActualCity(city);\n        console.log(actualCity);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  return (\n    <div className=\"appContainer\">\n      <div className=\"searchContainer\">\n        <Search onSearch={onSearch} />\n      </div>\n      <div className='cardContainer'>\n        {actualCity ? (\n          <TodayCard\n            actualTemp={actualTemp}\n            actualCity={actualCity}\n            forecastTemp={forecastTemp}\n          />\n        ) : (\n          \"\"\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}