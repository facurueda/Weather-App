{"ast":null,"code":"var _jsxFileName = \"/home/facundo/Project/Weather-App/src/components/todayCard/TodayCard.jsx\";\nimport React from 'react';\nimport ForecastCard from '../forecastCard/ForecastCard';\nimport './TodayCard.css';\nimport { Textfit } from 'react-textfit';\n\nconst TodayCard = ({\n  actualTemp,\n  actualCity,\n  forecastTemp\n}) => {\n  const DAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  const MONTHS = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  const DAY = DAYS[new Date().getDay()];\n  const MONTH = MONTHS[new Date().getMonth()];\n  const NUMBER_DAY = new Date().getDate();\n  const YEAR = new Date().getFullYear();\n  const TEXT_CONDITION = Object.values(actualTemp.condition);\n  const MIN_TEMP = forecastTemp[0].day.mintemp_c;\n  const MAX_TEMP = forecastTemp[0].day.maxtemp_c;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cardDayContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Textfit, {\n    mode: \"single\",\n    className: \"cityName\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 33\n    }\n  }, actualCity), /*#__PURE__*/React.createElement(Textfit, {\n    mode: \"single\",\n    className: \"dateContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 33\n    }\n  }, DAY, \", \", MONTH, \" \", NUMBER_DAY, \", \", YEAR), /*#__PURE__*/React.createElement(Textfit, {\n    mode: \"single\",\n    className: \"temperatura\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 33\n    }\n  }, actualTemp.temp_c, \" \\xB0C\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"division\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 33\n    }\n  }, \"---------\"), /*#__PURE__*/React.createElement(Textfit, {\n    mode: \"single\",\n    className: \"condition\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 33\n    }\n  }, TEXT_CONDITION[0]), /*#__PURE__*/React.createElement(Textfit, {\n    mode: \"single\",\n    className: \"minMaxTemp\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 33\n    }\n  }, MIN_TEMP, \"\\xB0C / \", MAX_TEMP, \"\\xB0C\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cardForecastContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 25\n    }\n  }, forecastTemp.map(dayInfo => {\n    console.log('map', dayInfo);\n    return /*#__PURE__*/React.createElement(ForecastCard, {\n      dayInfo: dayInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 49\n      }\n    });\n  })));\n};\n\nexport default TodayCard;","map":{"version":3,"sources":["/home/facundo/Project/Weather-App/src/components/todayCard/TodayCard.jsx"],"names":["React","ForecastCard","Textfit","TodayCard","actualTemp","actualCity","forecastTemp","DAYS","MONTHS","DAY","Date","getDay","MONTH","getMonth","NUMBER_DAY","getDate","YEAR","getFullYear","TEXT_CONDITION","Object","values","condition","MIN_TEMP","day","mintemp_c","MAX_TEMP","maxtemp_c","temp_c","map","dayInfo","console","log"],"mappings":"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","sourcesContent":["import React from 'react'\nimport ForecastCard from '../forecastCard/ForecastCard';\nimport './TodayCard.css'\nimport { Textfit } from 'react-textfit';\n\nconst TodayCard = ({ actualTemp, actualCity, forecastTemp }) => {\n\n        const DAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\n        const MONTHS = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\n        const DAY = DAYS[new Date().getDay()];\n\n        const MONTH = MONTHS[new Date().getMonth()];\n\n        const NUMBER_DAY = new Date().getDate();\n\n        const YEAR = new Date().getFullYear();\n\n        const TEXT_CONDITION = Object.values(actualTemp.condition);\n\n        const MIN_TEMP = forecastTemp[0].day.mintemp_c;\n\n        const MAX_TEMP = forecastTemp[0].day.maxtemp_c;\n\n        return (\n                <div>\n                        <div className='cardDayContainer'>\n                                <Textfit mode=\"single\" className=\"cityName\">{actualCity}</Textfit>\n                                <Textfit mode=\"single\" className=\"dateContainer\">{DAY}, {MONTH} {NUMBER_DAY}, {YEAR}</Textfit>\n                                <Textfit mode=\"single\" className=\"temperatura\">{actualTemp.temp_c} °C</Textfit>\n                                <div className=\"division\">---------</div>\n                                <Textfit mode=\"single\" className=\"condition\">{TEXT_CONDITION[0]}</Textfit>\n                                <Textfit mode=\"single\" className=\"minMaxTemp\">{MIN_TEMP}°C / {MAX_TEMP}°C</Textfit>\n                        </div>\n                        {/* EXPANDIR CON BOTON */}\n                        <div className=\"cardForecastContainer\">\n                                {forecastTemp.map(dayInfo => {\n                                        console.log('map',dayInfo)\n                                        return (\n                                                <ForecastCard dayInfo={dayInfo} />\n                                        )\n                                })}\n                        </div>\n                </div>\n        )\n}\n\nexport default TodayCard;"]},"metadata":{},"sourceType":"module"}